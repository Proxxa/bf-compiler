name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
  testing-outputs:
    runs-on: ubuntu-latest
    steps:
      - name: Build
        run: |
          cargo build --verbose
          sudo cp ./target/debug/bf-compiler /bin/bf-compiler
      - name: Hello World
        run: |
          echo "++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++." > hello-world.bf
          bf-compiler hello-world.bf -o hello-world
          if [ $(./hello-world) = "Hello, World!" ]; then echo \n\tHELLO WORLD OK; else exit 1 fi
      - name: ROT13
        run: |
          echo '-,+[                         Read first character and start outer character reading loop
                    -[                       Skip forward if character is 0
                        >>++++[>++++++++<-]  Set up divisor (32) for division loop
                                               (MEMORY LAYOUT: dividend copy remainder divisor quotient zero zero)
                        <+<-[                Set up dividend (x minus 1) and enter division loop
                            >+>+>-[>>>]      Increase copy and remainder / reduce divisor / Normal case: skip forward
                            <[[>+<-]>>+>]    Special case: move remainder back to divisor and increase quotient
                            <<<<<-           Decrement dividend
                        ]                    End division loop
                    ]>>>[-]+                 End skip loop; zero former divisor and reuse space for a flag
                    >--[-[<->+++[-]]]<[         Zero that flag unless quotient was 2 or 3; zero quotient; check flag
                        ++++++++++++<[       If flag then set up divisor (13) for second division loop
                                               (MEMORY LAYOUT: zero copy dividend divisor remainder quotient zero zero)
                            >-[>+>>]         Reduce divisor; Normal case: increase remainder
                            >[+[<+>-]>+>>]   Special case: increase remainder / move it back to divisor / increase quotient
                            <<<<<-           Decrease dividend
                        ]                    End division loop
                        >>[<+>-]             Add remainder back to divisor to get a useful 13
                        >[                   Skip forward if quotient was 0
                            -[               Decrement quotient and skip forward if quotient was 1
                                -<<[-]>>     Zero quotient and divisor if quotient was 2
                            ]<<[<<->>-]>>    Zero divisor and subtract 13 from copy if quotient was 1
                        ]<<[<<+>>-]          Zero divisor and add 13 to copy if quotient was 0
                    ]                        End outer skip loop (jump to here if ((character minus 1)/32) was not 2 or 3)
                    <[-]                     Clear remainder from first division if second division was skipped
                    <.[-]                    Output ROT13ed character from copy and clear it
                    <-,+                     Read next character
                ]                            End character reading loop' > rot13.bf
          bf-compiler rot13.bf -o rot13
          if [ $(echo -n abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 | ./rot13) = "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM0123456789" ]
          then
            echo \n\tROT13 OK
          else
            exit 1
          fi
